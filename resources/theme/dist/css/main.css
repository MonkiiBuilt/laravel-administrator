@charset "UTF-8";
/**
 * Monkii Bars for sites by Monkii
 *
 */
/**
 *
 * Colours
 *
 * For naming, read: http://davidwalsh.name/sass-color-variables-dont-suck
 * Naming generator: http://chir.ag/projects/name-that-color/
 *
 * Don't make up or use generic names. i.e. color__red, color_my-cool-colour
 * Though you might want to associate a few simple colours for reference
 *
 * Black and white can be as HTML colours, color: black; color: white;
 */
/**
 *
 * General, site-wide variables
 *
 *
 * Variables
 * - Name concisely, with full name unless abbreviation is obvious
 * 		e.g. ok to use -bg- for -background-
 * - Variables in this file should follow this format:
 * 		- $mb-component-name__[component-type]-css-property OR other
 *      - This goes in order from generic -> specific
 * - Variables inside a component file should be pre-fixed with $_mb-
 *		e.g. $_mb-button__padding
 */
body:before {
  background-color: #FCF8E3;
  border-bottom: 1px solid #FBEED5;
  border-left: 1px solid #FBEED5;
  color: #C09853;
  font: small-caption;
  padding: 3px 6px;
  pointer-events: none;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 100; }
  @media (min-width: 20em) {
    body:before {
      content: "xxxs ≥ 20em (20em)"; } }
  @media (min-width: 30em) {
    body:before {
      content: "xxs ≥ 30em (30em)"; } }
  @media (min-width: 35em) {
    body:before {
      content: "xs ≥ 35em (35em)"; } }
  @media (min-width: 40em) {
    body:before {
      content: "s ≥ 40em (40em)"; } }
  @media (min-width: 50em) {
    body:before {
      content: "m ≥ 50em (50em)"; } }
  @media (min-width: 60em) {
    body:before {
      content: "l ≥ 60em (60em)"; } }
  @media (min-width: 64em) {
    body:before {
      content: "xl ≥ 64em (64em)"; } }
  @media (min-width: 80em) {
    body:before {
      content: "xxl ≥ 80em (80em)"; } }
  @media (min-width: 100em) {
    body:before {
      content: "xxxl ≥ 100em (100em)"; } }

/**
* Utilities
*
* - Included by default from project to project
* - Reusable classes for common solutions
* - Mixins
*/
/**
* Base
*
* - Keep this file minimal. Should be for top-level stuff.
*
* A. Better box sizing - allows specific box-sizing overrides if needed not to break their children
*
*/
html {
  height: 100%;
  box-sizing: border-box;
  -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
          text-size-adjust: 100%;
  font-size: 62.5%; }
  html.is-ie8 {
    font-size: 100%; }

*,
*::before,
*::after {
  box-sizing: inherit; }

body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: white;
  font-size: 1.6rem; }

img,
canvas,
iframe,
video,
svg {
  max-width: 100%; }

img {
  vertical-align: top;
  max-width: 100%;
  width: auto;
  height: auto; }
  img.img--full {
    width: 100%; }

/**
* Font Families
*
* - All @font-face definitions should be in here
* - Taken from: http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/
*
* Supports:
*	Chrome 3.5+
*	Safari 3+
*	Firefox 3.5+
*	IE 9+
*	Android 4.4+
*	iOS 5.1+
*
*/
.container {
  width: 100%;
  max-width: 120rem;
  margin: 0 auto; }
  @media (min-width: 20em) {
    .container {
      padding: 0 1rem; } }
  @media (min-width: 35em) {
    .container {
      padding: 0 1.5rem; } }
  @media (min-width: 50em) {
    .container {
      padding: 0 2rem; } }
  @media (min-width: 64em) {
    .container {
      padding: 0 2.5rem; } }
  @media (min-width: 100em) {
    .container {
      padding: 0 3rem; } }

/**
 *
 * Header - Component styles
 *
 */
.icons-svg {
  display: none; }

.icon {
  display: inline-block;
  position: relative;
  width: 1em;
  height: 1em;
  top: 0.25ex;
  fill: currentColor;
  pointer-events: none; }

form.plain {
  display: inline; }
  form.plain button {
    background: none;
    border: none;
    padding: 0;
    font: inherit;
    cursor: pointer; }

form.inline {
  display: inline; }

.form__error {
  color: red; }

.icon-btn {
  display: inline-block;
  color: #337ab7;
  text-decoration: none; }
  .icon-btn:hover, .icon-btn:focus {
    color: #23527c;
    text-decoration: none; }
  .icon-btn:focus {
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px; }
  .icon-btn .icon {
    width: 1.1em;
    height: 1.1em; }
  .icon-btn + .icon-btn,
  .icon-btn + form.plain {
    margin-left: 0.5rem; }

.asset-add,
.asset-clear {
  color: #2980b9; }
  .asset-add:hover,
  .asset-clear:hover {
    text-decoration: none;
    color: #2472a4;
    border-bottom: solid 1px #2472a4; }

.asset-img {
  display: block;
  max-width: 20rem;
  max-height: 20rem; }
  .asset-img:hover {
    cursor: pointer; }

/**
 *
 * Home page specific styles
 *
 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uY3NzIiwibWFpbi5zY3NzIiwidmFyaWFibGVzL19jb2xvcnMuc2NzcyIsInZhcmlhYmxlcy9fZ2VuZXJhbC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbXEvX21xLnNjc3MiLCJiYXNlL191dGlsaXRpZXMuc2NzcyIsImJhc2UvX2Jhc2Uuc2NzcyIsImJhc2UvX2ZvbnRzLnNjc3MiLCJiYXNlL19sYXlvdXQuc2NzcyIsImNvbXBvbmVudHMvX2hlYWRlci5zY3NzIiwiY29tcG9uZW50cy9faWNvbnMuc2NzcyIsImNvbXBvbmVudHMvX2Zvcm1zLnNjc3MiLCJjb21wb25lbnRzL19hc3NldC1waWNrZXIuc2NzcyIsInBhZ2VzL19ob21lLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWlCO0FDQWpCOzs7SUFHRztBQ0hIOzs7Ozs7Ozs7OztJQVdHO0FDWEg7Ozs7Ozs7Ozs7Ozs7SUFhRztBQ3dQQztFQUNJLDJCQUF5QjtFQUN6QixrQ0FBZ0M7RUFDaEMsZ0NBQThCO0VBQzlCLGdCQUFjO0VBQ2QscUJBQW1CO0VBQ25CLGtCQUFnQjtFQUNoQixzQkFBb0I7RUFDcEIsaUJBQWU7RUFDZixVQUFRO0VBQ1IsUUFBTTtFQUNOLGNBQVksRUFTZjtFQXpERztJQXFDSjtNQWlCWSwrQkFBUyxFQUF5RCxFQUc3RTtFQXpERztJQXFDSjtNQWlCWSw4QkFBUyxFQUF5RCxFQUc3RTtFQXpERztJQXFDSjtNQWlCWSw2QkFBUyxFQUF5RCxFQUc3RTtFQXpERztJQXFDSjtNQWlCWSw0QkFBUyxFQUF5RCxFQUc3RTtFQXpERztJQXFDSjtNQWlCWSw0QkFBUyxFQUF5RCxFQUc3RTtFQXpERztJQXFDSjtNQWlCWSw0QkFBUyxFQUF5RCxFQUc3RTtFQXpERztJQXFDSjtNQWlCWSw2QkFBUyxFQUF5RCxFQUc3RTtFQXpERztJQXFDSjtNQWlCWSw4QkFBUyxFQUF5RCxFQUc3RTtFQXpERztJQXFDSjtNQWlCWSxpQ0FBUyxFQUF5RCxFQUc3RTs7QUN6Ukw7Ozs7OztHQU1FO0FDTkY7Ozs7Ozs7R0FPRTtBQUdGO0VBQ0MsY0FBWTtFQUNaLHdCQUFzQjtFQUN0QixnQ0FBc0I7TUFBdEIsNEJBQXNCO1VBQXRCLHdCQUFzQjtFQUN0QixrQkFBZ0IsRUFLaEI7RUFURDtJQU9FLGlCQUFlLEVBQ2Y7O0FBSUY7OztFQUdDLHFCQUFtQixFQUNuQjs7QUFHRDtFQUNFLHFDQUFtQztFQUNwQyxvQ0FBa0M7RUFDbEMseUJBQXVCO0VBQ3ZCLG1CQUFpQixFQUNqQjs7QUFFRDs7Ozs7RUFLQyxpQkFBZSxFQUNmOztBQUlEO0VBQ0MscUJBQW1CO0VBQ25CLGlCQUFlO0VBQ2YsYUFBVztFQUNYLGNBQVksRUFLWjtFQVREO0lBT0UsYUFBVyxFQUNYOztBQ3RERjs7Ozs7Ozs7Ozs7Ozs7R0FjRTtBQ1hGO0VBQ0MsYUFBVztFQUNYLG1CTFVzQjtFS1R0QixnQkFBYyxFQXFCZDtFSnFNTztJSTdOUjtNQU1FLGlCTFVTLEVLUVYsRUFBQTtFSnFNTztJSTdOUjtNQVVFLG1CTE9XLEVLT1osRUFBQTtFSnFNTztJSTdOUjtNQWNFLGlCTElTLEVLTVYsRUFBQTtFSnFNTztJSTdOUjtNQWtCRSxtQkxDVyxFS0taLEVBQUE7RUpxTU87SUk3TlI7TUFzQkUsaUJMRlMsRUtJVixFQUFBOztBQzNCRDs7OztJQUlHO0FDUUg7RUFDQyxlQUFhLEVBQ2I7O0FBV0Q7RUFDQyx1QkFBcUI7RUFDckIsb0JBQWtCO0VBQ2xCLFlBQVc7RUFDWCxhQUFXO0VBQ1gsYUFBVztFQUNYLG9CQUFrQjtFQUNsQixzQkFBb0IsRUFDcEI7O0FDakNEO0VBQ0UsaUJBQWUsRUFTaEI7RUFWRDtJQUlJLGtCQUFnQjtJQUNoQixjQUFZO0lBQ1osWUFBVTtJQUNWLGVBQWE7SUFDYixpQkFBZSxFQUNoQjs7QUFHSDtFQUNFLGlCQUFlLEVBQ2hCOztBQUVEO0VBQ0UsWUFBVSxFQUNYOztBQUVEO0VBQ0UsdUJBQXFCO0VBQ3JCLGdCQUFjO0VBQ2QsdUJBQXFCLEVBc0J0QjtFQXpCRDtJQU9JLGdCQUFjO0lBQ2QsdUJBQXFCLEVBQ3RCO0VBVEg7SUFZSSw0Q0FBMEM7SUFDMUMsc0JBQW9CLEVBQ3JCO0VBRUQ7SUFDRSxjQUFZO0lBQ1osZUFBYSxFQUNkO0VBbkJIOztJQXVCSSxxQkFBbUIsRUFDcEI7O0FDM0NIOztFQUVFLGdCVm9CMkIsRVViNUI7RUFURDs7SUFLSSx1QkFBcUI7SUFDckIsZ0JBQWlDO0lBQ2pDLGtDQUFtRCxFQUNwRDs7QUFHSDtFQUNFLGdCQUFjO0VBQ2Qsa0JBQWdCO0VBQ2hCLG1CQUFpQixFQUtsQjtFQVJEO0lBTUksaUJBQWUsRUFDaEI7O0FDbkJIOzs7O0lBSUciLCJmaWxlIjoibWFpbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6W251bGwsIi8qKlxyXG4gKiBNb25raWkgQmFycyBmb3Igc2l0ZXMgYnkgTW9ua2lpXHJcbiAqXHJcbiAqL1xyXG5cclxuQGNoYXJzZXQgXCJVVEYtOFwiO1xyXG5cclxuXHJcbi8vIFZhcmlhYmxlc1xyXG4vLyAtLS0tLS0tLS1cclxuQGltcG9ydCBcInZhcmlhYmxlcy9jb2xvcnNcIjtcclxuQGltcG9ydCBcInZhcmlhYmxlcy9nZW5lcmFsXCI7XHJcblxyXG5cclxuLy8gVmVuZG9yIGltcG9ydHNcclxuLy8gLS0tLS0tLS0tLS0tLS1cclxuQGltcG9ydCBcIi4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLW1xL21xXCI7XHJcbkBpbXBvcnQgXCIuLi8uLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXNjc3Mvc2Fzcy9ub3JtYWxpemVcIjtcclxuXHJcblxyXG4vLyBCYXNlIHN0eWxlc1xyXG4vLyAtLS0tLS0tLS0tLVxyXG5AaW1wb3J0IFwiYmFzZS91dGlsaXRpZXNcIjtcclxuQGltcG9ydCBcImJhc2UvYmFzZVwiO1xyXG5AaW1wb3J0IFwiYmFzZS9mb250c1wiO1xyXG5AaW1wb3J0IFwiYmFzZS9sYXlvdXRcIjtcclxuXHJcblxyXG4vLyBDb21wb25lbnQgc3R5bGVzXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tXHJcbkBpbXBvcnQgXCJjb21wb25lbnRzL2hlYWRlclwiO1xyXG5AaW1wb3J0IFwiY29tcG9uZW50cy9pY29uc1wiO1xyXG5AaW1wb3J0IFwiY29tcG9uZW50cy9mb3Jtc1wiO1xyXG5AaW1wb3J0IFwiY29tcG9uZW50cy9hc3NldC1waWNrZXJcIjtcclxuXHJcblxyXG4vLyBQYWdlIHNwZWNpZmljIHN0eWxlc1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5AaW1wb3J0IFwicGFnZXMvaG9tZVwiOyIsIi8qKlxyXG4gKlxyXG4gKiBDb2xvdXJzXHJcbiAqXHJcbiAqIEZvciBuYW1pbmcsIHJlYWQ6IGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvc2Fzcy1jb2xvci12YXJpYWJsZXMtZG9udC1zdWNrXHJcbiAqIE5hbWluZyBnZW5lcmF0b3I6IGh0dHA6Ly9jaGlyLmFnL3Byb2plY3RzL25hbWUtdGhhdC1jb2xvci9cclxuICpcclxuICogRG9uJ3QgbWFrZSB1cCBvciB1c2UgZ2VuZXJpYyBuYW1lcy4gaS5lLiBjb2xvcl9fcmVkLCBjb2xvcl9teS1jb29sLWNvbG91clxyXG4gKiBUaG91Z2ggeW91IG1pZ2h0IHdhbnQgdG8gYXNzb2NpYXRlIGEgZmV3IHNpbXBsZSBjb2xvdXJzIGZvciByZWZlcmVuY2VcclxuICpcclxuICogQmxhY2sgYW5kIHdoaXRlIGNhbiBiZSBhcyBIVE1MIGNvbG91cnMsIGNvbG9yOiBibGFjazsgY29sb3I6IHdoaXRlO1xyXG4gKi9cclxuXHJcblxyXG4vLy8vIEFsbCBjb2xvdXJzXHJcbi8vLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4kY29sb3JfX21lcmN1cnkgICAgIDogI2UxZTFlMTtcclxuJGNvbG9yX19zaWx2ZXIgICAgICA6ICNjY2M7XHJcbiRjb2xvcl9fZHVzdHktZ3JleSAgOiAjOTk5O1xyXG4kY29sb3JfX21pbmUtc2hhZnQgIDogIzIyMjtcclxuJGNvbG9yX19tYXRyaXggICAgICA6ICNBRjUwNTA7XHJcbiRjb2xvcl9fanVuZ2xlLWdyZWVuOiAjMjdhZTYwO1xyXG4kY29sb3JfX2J1dHRlcmN1cCAgIDogI2YzOWMxMjtcclxuJGNvbG9yX19tYXJpbmVyICAgICA6ICMyOTgwYjk7XHJcblxyXG5cclxuLy8vLyBTZW1hbnRpYyBuYW1lc1xyXG4vLy8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gQXNzaWduIGNvbG91cnMgdG8gbW9yZSBtZWFuaW5nZnVsIGFuZCByZS11c2FibGUgbmFtZXNcclxuLy8gKHJlc3RyaWN0IHRvIGEgY291cGxlIHRydWx5IGdsb2JhbCBjb2xvdXJzIG9ubHkpXHJcbiRjb2xvcl9fcHJpbWFyeSAgOiAkY29sb3JfX21hdHJpeDtcclxuJGNvbG9yX19zZWNvbmRhcnk6ICRjb2xvcl9fbWVyY3VyeTtcclxuJGNvbG9yX19lcnJvciAgICA6ICRjb2xvcl9fbWF0cml4O1xyXG4kY29sb3JfX3N1Y2Nlc3MgIDogJGNvbG9yX19qdW5nbGUtZ3JlZW47XHJcbiRjb2xvcl9fd2FybmluZyAgOiAkY29sb3JfX2J1dHRlcmN1cDtcclxuJGNvbG9yX19pbmZvICAgICA6ICRjb2xvcl9fbWFyaW5lcjsiLCIvKipcclxuICpcclxuICogR2VuZXJhbCwgc2l0ZS13aWRlIHZhcmlhYmxlc1xyXG4gKlxyXG4gKlxyXG4gKiBWYXJpYWJsZXNcclxuICogLSBOYW1lIGNvbmNpc2VseSwgd2l0aCBmdWxsIG5hbWUgdW5sZXNzIGFiYnJldmlhdGlvbiBpcyBvYnZpb3VzXHJcbiAqIFx0XHRlLmcuIG9rIHRvIHVzZSAtYmctIGZvciAtYmFja2dyb3VuZC1cclxuICogLSBWYXJpYWJsZXMgaW4gdGhpcyBmaWxlIHNob3VsZCBmb2xsb3cgdGhpcyBmb3JtYXQ6XHJcbiAqIFx0XHQtICRtYi1jb21wb25lbnQtbmFtZV9fW2NvbXBvbmVudC10eXBlXS1jc3MtcHJvcGVydHkgT1Igb3RoZXJcclxuICogICAgICAtIFRoaXMgZ29lcyBpbiBvcmRlciBmcm9tIGdlbmVyaWMgLT4gc3BlY2lmaWNcclxuICogLSBWYXJpYWJsZXMgaW5zaWRlIGEgY29tcG9uZW50IGZpbGUgc2hvdWxkIGJlIHByZS1maXhlZCB3aXRoICRfbWItXHJcbiAqXHRcdGUuZy4gJF9tYi1idXR0b25fX3BhZGRpbmdcclxuICovXHJcblxyXG4kbWF4LXNpdGUtd2lkdGg6IDEyMHJlbSAhZGVmYXVsdDtcclxuXHJcbi8vIERlZmluZSBob3cgbXVjaCBzcGFjaW5nL3BhZGRpbmcgeW91IHdhbnQgaW4gY29udGFpbmVyIGd1dHRlclxyXG4kY29udGFpbmVyLWd1dHRlcjogKFxyXG5cdHh4eHM6IDFyZW0sXHJcblx0ICB4czogMS41cmVtLFxyXG5cdCAgIG06IDJyZW0sXHJcblx0ICB4bDogMi41cmVtLFxyXG5cdHh4eGw6IDNyZW1cclxuKSAhZGVmYXVsdDtcclxuXHJcblxyXG5cclxuLy8gei1pbmRleCBtYW5hZ2VtZW50XHJcbi8vIEFMTCB6LWluZGV4J3Mgc2hvdWxkIGJlIGRlZmluZWQgaGVyZS4gVXNlIEBmdW5jdGlvbiBnZXQteigkbGF5ZXIpIGluIF91dGlsaXRpZXMuc2Nzc1xyXG4vLyBVc2FnZTogLm15LWNsYXNzIHsgei1pbmRleDogZ2V0LXooJ21lbnUnKSAhZGVmYXVsdDsgfVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4kemluZGV4LWxheWVyczogKFxyXG5cdCdtb2RhbCcgIDogMTAwMCxcclxuXHQnbWVudScgICA6IDkwMCxcclxuXHQnZGVmYXVsdCc6IDEsXHJcblx0J2JlbG93JyAgOiAtMVxyXG4pICFkZWZhdWx0O1xyXG5cclxuXHJcblxyXG4vLyBSZXNwb25zaXZlIGJyZWFrIHBvaW50c1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBAc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy1tcS9zYXNzLW1xXHJcbi8vIFRoZXNlIGdldCBjb252ZXJ0ZWQgdG8gZW1zIHdoZXRoZXIgeW91IHNwZWNpZnkgcHggb3Igbm90LCBzbyBtYXkgYXMgd2VsbCB1c2VcclxuLy8gZW1zIHRvIGtlZXAgdGhpbmdzIGNvbnNpc3RlbnQuIFdlIGhhdmUgYSBsb3Qgb2YgYnJlYWtwb2ludHMgYnkgZGVmYXVsdCwgYXNcclxuLy8gb2Z0ZW4gbGl0dGxlIHR3ZWFrcyBuZWVkIHRvIGJlIG1hZGUgYXQgY2VydGFpbiBwb2ludHNcclxuLy9cclxuLy8geHh4czogMzIwcHggIChwaG9uZSBwb3J0cmFpdClcclxuLy8gIHh4czogNDgwcHggIChwaG9uZSBsYW5kc2NhcGUpXHJcbi8vICAgeHM6IDU2MHB4ICAobGFyZ2VyIHBob25lIGxhbmRzY2FwZSlcclxuLy8gICAgczogNjQwcHggIChsYXJnZSBwaG9uZSBsYW5kc2NhcGUgLyBzbWFsbCB0YWJsZXQgcG9ydHJhaXQpXHJcbi8vICAgIG06IDgwMHB4ICAobGFyZ2UgdGFibGV0IHBvcnRyYWl0KVxyXG4vLyAgICBsOiA5NjBweCAgKGxhcmdlIHRhYmxldCBsYW5kc2NhcGUpXHJcbi8vICAgeGw6IDEwMjRweCAoZGVza3RvcCBzbWFsbClcclxuLy8gIHh4bDogMTI4MHB4IChkZXNrdG9wIG1pZClcclxuLy8geHh4bDogMTYwMHB4IChkZXNrdG9wIGxhcmdlKVxyXG4kbXEtYnJlYWtwb2ludHM6IChcclxuXHR4eHhzOiAyMGVtLFxyXG5cdCB4eHM6IDMwZW0sXHJcblx0ICB4czogMzVlbSxcclxuXHQgICBzOiA0MGVtLFxyXG5cdCAgIG06IDUwZW0sXHJcblx0ICAgbDogNjBlbSxcclxuXHQgIHhsOiA2NGVtLFxyXG5cdCB4eGw6IDgwZW0sXHJcblx0eHh4bDogMTAwZW1cclxuKSAhZGVmYXVsdDtcclxuXHJcbi8vIERpc3BsYXkgY3VycmVudGx5IGFjdGl2ZSBicmVha3BvaW50IGluIGJyb3dzZXIgd2luZG93LiBPcmRlciBsaXN0IHNtYWxsZXN0IHRvIGhpZ2hlc3RcclxuJG1xLXNob3ctYnJlYWtwb2ludHM6IG1hcC1rZXlzKCRtcS1icmVha3BvaW50cykgIWRlZmF1bHQ7XHJcbiIsIkBjaGFyc2V0IFwiVVRGLThcIjsgLy8gRml4ZXMgYW4gaXNzdWUgd2hlcmUgUnVieSBsb2NhbGUgaXMgbm90IHNldCBwcm9wZXJseVxuICAgICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zYXNzLW1xL3Nhc3MtbXEvcHVsbC8xMFxuXG4vLy8gQmFzZSBmb250IHNpemUgb24gdGhlIGA8Ym9keT5gIGVsZW1lbnRcbi8vLyBAdHlwZSBOdW1iZXIgKHVuaXQpXG4kbXEtYmFzZS1mb250LXNpemU6IDE2cHggIWRlZmF1bHQ7XG5cbi8vLyBSZXNwb25zaXZlIG1vZGVcbi8vL1xuLy8vIFNldCB0byBgZmFsc2VgIHRvIGVuYWJsZSBzdXBwb3J0IGZvciBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEBtZWRpYSBxdWVyaWVzLFxuLy8vIChJRSA8PSA4LCBGaXJlZm94IDw9IDMsIE9wZXJhIDw9IDkpXG4vLy9cbi8vLyBZb3UgY291bGQgY3JlYXRlIGEgc3R5bGVzaGVldCBzZXJ2ZWQgZXhjbHVzaXZlbHkgdG8gb2xkZXIgYnJvd3NlcnMsXG4vLy8gd2hlcmUgQG1lZGlhIHF1ZXJpZXMgYXJlIHJhc3Rlcml6ZWRcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgLy8gb2xkLWllLnNjc3Ncbi8vLyAgJG1xLXJlc3BvbnNpdmU6IGZhbHNlO1xuLy8vICBAaW1wb3J0ICdtYWluJzsgLy8gQG1lZGlhIHF1ZXJpZXMgaW4gdGhpcyBmaWxlIHdpbGwgYmUgcmFzdGVyaXplZCB1cCB0byAkbXEtc3RhdGljLWJyZWFrcG9pbnRcbi8vLyAgICAgICAgICAgICAgICAgICAvLyBsYXJnZXIgYnJlYWtwb2ludHMgd2lsbCBiZSBpZ25vcmVkXG4vLy9cbi8vLyBAdHlwZSBCb29sZWFuXG4vLy8gQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3Nhc3MtbXEvc2Fzcy1tcSNyZXNwb25zaXZlLW1vZGUtb2ZmIERpc2FibGVkIHJlc3BvbnNpdmUgbW9kZSBkb2N1bWVudGF0aW9uXG4kbXEtcmVzcG9uc2l2ZTogdHJ1ZSAhZGVmYXVsdDtcblxuLy8vIEJyZWFrcG9pbnQgbGlzdFxuLy8vXG4vLy8gTmFtZSB5b3VyIGJyZWFrcG9pbnRzIGluIGEgd2F5IHRoYXQgY3JlYXRlcyBhIHViaXF1aXRvdXMgbGFuZ3VhZ2Vcbi8vLyBhY3Jvc3MgdGVhbSBtZW1iZXJzLiBJdCB3aWxsIGltcHJvdmUgY29tbXVuaWNhdGlvbiBiZXR3ZWVuXG4vLy8gc3Rha2Vob2xkZXJzLCBkZXNpZ25lcnMsIGRldmVsb3BlcnMsIGFuZCB0ZXN0ZXJzLlxuLy8vXG4vLy8gQHR5cGUgTWFwXG4vLy8gQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3Nhc3MtbXEvc2Fzcy1tcSNzZWVpbmctdGhlLWN1cnJlbnRseS1hY3RpdmUtYnJlYWtwb2ludCBGdWxsIGRvY3VtZW50YXRpb24gYW5kIGV4YW1wbGVzXG4kbXEtYnJlYWtwb2ludHM6IChcbiAgICBtb2JpbGU6ICAzMjBweCxcbiAgICB0YWJsZXQ6ICA3NDBweCxcbiAgICBkZXNrdG9wOiA5ODBweCxcbiAgICB3aWRlOiAgICAxMzAwcHhcbikgIWRlZmF1bHQ7XG5cbi8vLyBTdGF0aWMgYnJlYWtwb2ludCAoZm9yIGZpeGVkLXdpZHRoIGxheW91dHMpXG4vLy9cbi8vLyBEZWZpbmUgdGhlIGJyZWFrcG9pbnQgZnJvbSAkbXEtYnJlYWtwb2ludHMgdGhhdCBzaG91bGRcbi8vLyBiZSB1c2VkIGFzIHRoZSB0YXJnZXQgd2lkdGggZm9yIHRoZSBmaXhlZC13aWR0aCBsYXlvdXRcbi8vLyAoaS5lLiB3aGVuICRtcS1yZXNwb25zaXZlIGlzIHNldCB0byAnZmFsc2UnKSBpbiBhIG9sZC1pZS5zY3NzXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gIC8vIHRhYmxldC1vbmx5LnNjc3Ncbi8vLyAgLy9cbi8vLyAgLy8gSWdub3JlIGFsbCBzdHlsZXMgYWJvdmUgdGFibGV0IGJyZWFrcG9pbnQsXG4vLy8gIC8vIGFuZCBmaXggdGhlIHN0eWxlcyAoZS5nLiBsYXlvdXQpIGF0IHRhYmxldCB3aWR0aFxuLy8vICAkbXEtcmVzcG9uc2l2ZTogZmFsc2U7XG4vLy8gICRtcS1zdGF0aWMtYnJlYWtwb2ludDogdGFibGV0O1xuLy8vICBAaW1wb3J0ICdtYWluJzsgLy8gQG1lZGlhIHF1ZXJpZXMgaW4gdGhpcyBmaWxlIHdpbGwgYmUgcmFzdGVyaXplZCB1cCB0byB0YWJsZXRcbi8vLyAgICAgICAgICAgICAgICAgICAvLyBsYXJnZXIgYnJlYWtwb2ludHMgd2lsbCBiZSBpZ25vcmVkXG4vLy9cbi8vLyBAdHlwZSBTdHJpbmdcbi8vLyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy1tcS9zYXNzLW1xI2FkZGluZy1jdXN0b20tYnJlYWtwb2ludHMgRnVsbCBkb2N1bWVudGF0aW9uIGFuZCBleGFtcGxlc1xuJG1xLXN0YXRpYy1icmVha3BvaW50OiBkZXNrdG9wICFkZWZhdWx0O1xuXG4vLy8gU2hvdyBicmVha3BvaW50cyBpbiB0aGUgdG9wIHJpZ2h0IGNvcm5lclxuLy8vXG4vLy8gSWYgeW91IHdhbnQgdG8gZGlzcGxheSB0aGUgY3VycmVudGx5IGFjdGl2ZSBicmVha3BvaW50IGluIHRoZSB0b3Bcbi8vLyByaWdodCBjb3JuZXIgb2YgeW91ciBzaXRlIGR1cmluZyBkZXZlbG9wbWVudCwgYWRkIHRoZSBicmVha3BvaW50c1xuLy8vIHRvIHRoaXMgbGlzdCwgb3JkZXJlZCBieSB3aWR0aCwgZS5nLiAobW9iaWxlLCB0YWJsZXQsIGRlc2t0b3ApLlxuLy8vXG4vLy8gQHR5cGUgbWFwXG4kbXEtc2hvdy1icmVha3BvaW50czogKCkgIWRlZmF1bHQ7XG5cbi8vLyBDdXN0b21pemUgdGhlIG1lZGlhIHR5cGUgKGUuZy4gYEBtZWRpYSBzY3JlZW5gIG9yIGBAbWVkaWEgcHJpbnRgKVxuLy8vIEJ5IGRlZmF1bHQgc2Fzcy1tcSB1c2VzIGFuIFwiYWxsXCIgbWVkaWEgdHlwZSAoYEBtZWRpYSBhbGwgYW5kIOKApmApXG4vLy9cbi8vLyBAdHlwZSBTdHJpbmdcbi8vLyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy1tcS9zYXNzLW1xI2NoYW5naW5nLW1lZGlhLXR5cGUgRnVsbCBkb2N1bWVudGF0aW9uIGFuZCBleGFtcGxlc1xuJG1xLW1lZGlhLXR5cGU6IGFsbCAhZGVmYXVsdDtcblxuLy8vIENvbnZlcnQgcGl4ZWxzIHRvIGVtc1xuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRweCAtIHZhbHVlIHRvIGNvbnZlcnRcbi8vLyBAcGFyYW0ge051bWJlcn0gJGJhc2UtZm9udC1zaXplICgkbXEtYmFzZS1mb250LXNpemUpIC0gYDxib2R5PmAgZm9udCBzaXplXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICRmb250LXNpemUtaW4tZW1zOiBtcS1weDJlbSgxNnB4KTtcbi8vLyAgcCB7IGZvbnQtc2l6ZTogbXEtcHgyZW0oMTZweCk7IH1cbi8vL1xuLy8vIEByZXF1aXJlcyAkbXEtYmFzZS1mb250LXNpemVcbi8vLyBAcmV0dXJucyB7TnVtYmVyfVxuQGZ1bmN0aW9uIG1xLXB4MmVtKCRweCwgJGJhc2UtZm9udC1zaXplOiAkbXEtYmFzZS1mb250LXNpemUpIHtcbiAgICBAaWYgdW5pdGxlc3MoJHB4KSB7XG4gICAgICAgIEB3YXJuIFwiQXNzdW1pbmcgI3skcHh9IHRvIGJlIGluIHBpeGVscywgYXR0ZW1wdGluZyB0byBjb252ZXJ0IGl0IGludG8gcGl4ZWxzLlwiO1xuICAgICAgICBAcmV0dXJuIG1xLXB4MmVtKCRweCAqIDFweCwgJGJhc2UtZm9udC1zaXplKTtcbiAgICB9IEBlbHNlIGlmIHVuaXQoJHB4KSA9PSBlbSB7XG4gICAgICAgIEByZXR1cm4gJHB4O1xuICAgIH1cbiAgICBAcmV0dXJuICgkcHggLyAkYmFzZS1mb250LXNpemUpICogMWVtO1xufVxuXG4vLy8gR2V0IGEgYnJlYWtwb2ludCdzIHdpZHRoXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJG5hbWUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50LiBPbmUgb2YgJG1xLWJyZWFrcG9pbnRzXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICR0YWJsZXQtd2lkdGg6IG1xLWdldC1icmVha3BvaW50LXdpZHRoKHRhYmxldCk7XG4vLy8gIEBtZWRpYSAobWluLXdpZHRoOiBtcS1nZXQtYnJlYWtwb2ludC13aWR0aChkZXNrdG9wKSkge31cbi8vL1xuLy8vIEByZXF1aXJlcyB7VmFyaWFibGV9ICRtcS1icmVha3BvaW50c1xuLy8vXG4vLy8gQHJldHVybnMge051bWJlcn0gVmFsdWUgaW4gcGl4ZWxzXG5AZnVuY3Rpb24gbXEtZ2V0LWJyZWFrcG9pbnQtd2lkdGgoJG5hbWUsICRicmVha3BvaW50czogJG1xLWJyZWFrcG9pbnRzKSB7XG4gICAgQGlmIG1hcC1oYXMta2V5KCRicmVha3BvaW50cywgJG5hbWUpIHtcbiAgICAgICAgQHJldHVybiBtYXAtZ2V0KCRicmVha3BvaW50cywgJG5hbWUpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgICBAd2FybiBcIkJyZWFrcG9pbnQgI3skbmFtZX0gd2Fzbid0IGZvdW5kIGluICRicmVha3BvaW50cy5cIjtcbiAgICB9XG59XG5cbi8vLyBNZWRpYSBRdWVyeSBtaXhpblxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmcgfCBCb29sZWFufSAkZnJvbSAoZmFsc2UpIC0gT25lIG9mICRtcS1icmVha3BvaW50c1xuLy8vIEBwYXJhbSB7U3RyaW5nIHwgQm9vbGVhbn0gJHVudGlsIChmYWxzZSkgLSBPbmUgb2YgJG1xLWJyZWFrcG9pbnRzXG4vLy8gQHBhcmFtIHtTdHJpbmcgfCBCb29sZWFufSAkYW5kIChmYWxzZSkgLSBBZGRpdGlvbmFsIG1lZGlhIHF1ZXJ5IHBhcmFtZXRlcnNcbi8vLyBAcGFyYW0ge1N0cmluZ30gJG1lZGlhLXR5cGUgKCRtcS1tZWRpYS10eXBlKSAtIE1lZGlhIHR5cGU6IHNjcmVlbiwgcHJpbnTigKZcbi8vL1xuLy8vIEBpZ25vcmUgVW5kb2N1bWVudGVkIEFQSSwgZm9yIGFkdmFuY2VkIHVzZSBvbmx5OlxuLy8vIEBpZ25vcmUgQHBhcmFtIHtNYXB9ICRicmVha3BvaW50cyAoJG1xLWJyZWFrcG9pbnRzKVxuLy8vIEBpZ25vcmUgQHBhcmFtIHtTdHJpbmd9ICRzdGF0aWMtYnJlYWtwb2ludCAoJG1xLXN0YXRpYy1icmVha3BvaW50KVxuLy8vXG4vLy8gQGNvbnRlbnQgc3R5bGluZyBydWxlcywgd3JhcHBlZCBpbnRvIGEgQG1lZGlhIHF1ZXJ5IHdoZW4gJHJlc3BvbnNpdmUgaXMgdHJ1ZVxuLy8vXG4vLy8gQHJlcXVpcmVzIHtWYXJpYWJsZX0gJG1xLW1lZGlhLXR5cGVcbi8vLyBAcmVxdWlyZXMge1ZhcmlhYmxlfSAkbXEtYnJlYWtwb2ludHNcbi8vLyBAcmVxdWlyZXMge1ZhcmlhYmxlfSAkbXEtc3RhdGljLWJyZWFrcG9pbnRcbi8vLyBAcmVxdWlyZXMge2Z1bmN0aW9ufSBtcS1weDJlbVxuLy8vIEByZXF1aXJlcyB7ZnVuY3Rpb259IG1xLWdldC1icmVha3BvaW50LXdpZHRoXG4vLy9cbi8vLyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy1tcS9zYXNzLW1xI3Jlc3BvbnNpdmUtbW9kZS1vbi1kZWZhdWx0IEZ1bGwgZG9jdW1lbnRhdGlvbiBhbmQgZXhhbXBsZXNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgLmVsZW1lbnQge1xuLy8vICAgIEBpbmNsdWRlIG1xKCRmcm9tOiBtb2JpbGUpIHtcbi8vLyAgICAgIGNvbG9yOiByZWQ7XG4vLy8gICAgfVxuLy8vICAgIEBpbmNsdWRlIG1xKCR1bnRpbDogdGFibGV0KSB7XG4vLy8gICAgICBjb2xvcjogYmx1ZTtcbi8vLyAgICB9XG4vLy8gICAgQGluY2x1ZGUgbXEobW9iaWxlLCB0YWJsZXQpIHtcbi8vLyAgICAgIGNvbG9yOiBncmVlbjtcbi8vLyAgICB9XG4vLy8gICAgQGluY2x1ZGUgbXEoJGZyb206IHRhYmxldCwgJGFuZDogJyhvcmllbnRhdGlvbjogbGFuZHNjYXBlKScpIHtcbi8vLyAgICAgIGNvbG9yOiB0ZWFsO1xuLy8vICAgIH1cbi8vLyAgICBAaW5jbHVkZSBtcSg5NTBweCkge1xuLy8vICAgICAgY29sb3I6IGhvdHBpbms7XG4vLy8gICAgfVxuLy8vICAgIEBpbmNsdWRlIG1xKHRhYmxldCwgJG1lZGlhLXR5cGU6IHNjcmVlbikge1xuLy8vICAgICAgY29sb3I6IGhvdHBpbms7XG4vLy8gICAgfVxuLy8vICAgIC8vIEFkdmFuY2VkIHVzZTpcbi8vLyAgICAkbXktYnJlYWtwb2ludHM6IChMOiA5MDBweCwgWEw6IDEyMDBweCk7XG4vLy8gICAgQGluY2x1ZGUgbXEoTCwgJGJyZWFrcG9pbnRzOiAkbXktYnJlYWtwb2ludHMsICRzdGF0aWMtYnJlYWtwb2ludDogTCkge1xuLy8vICAgICAgY29sb3I6IGhvdHBpbms7XG4vLy8gICAgfVxuLy8vICB9XG5AbWl4aW4gbXEoXG4gICAgJGZyb206IGZhbHNlLFxuICAgICR1bnRpbDogZmFsc2UsXG4gICAgJGFuZDogZmFsc2UsXG4gICAgJG1lZGlhLXR5cGU6ICRtcS1tZWRpYS10eXBlLFxuICAgICRicmVha3BvaW50czogJG1xLWJyZWFrcG9pbnRzLFxuICAgICRyZXNwb25zaXZlOiAkbXEtcmVzcG9uc2l2ZSxcbiAgICAkc3RhdGljLWJyZWFrcG9pbnQ6ICRtcS1zdGF0aWMtYnJlYWtwb2ludFxuKSB7XG4gICAgJG1pbi13aWR0aDogMDtcbiAgICAkbWF4LXdpZHRoOiAwO1xuICAgICRtZWRpYS1xdWVyeTogJyc7XG5cbiAgICAvLyBGcm9tOiB0aGlzIGJyZWFrcG9pbnQgKGluY2x1c2l2ZSlcbiAgICBAaWYgJGZyb20ge1xuICAgICAgICBAaWYgdHlwZS1vZigkZnJvbSkgPT0gbnVtYmVyIHtcbiAgICAgICAgICAgICRtaW4td2lkdGg6IG1xLXB4MmVtKCRmcm9tKTtcbiAgICAgICAgfSBAZWxzZSB7XG4gICAgICAgICAgICAkbWluLXdpZHRoOiBtcS1weDJlbShtcS1nZXQtYnJlYWtwb2ludC13aWR0aCgkZnJvbSwgJGJyZWFrcG9pbnRzKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVbnRpbDogdGhhdCBicmVha3BvaW50IChleGNsdXNpdmUpXG4gICAgQGlmICR1bnRpbCB7XG4gICAgICAgIEBpZiB0eXBlLW9mKCR1bnRpbCkgPT0gbnVtYmVyIHtcbiAgICAgICAgICAgICRtYXgtd2lkdGg6IG1xLXB4MmVtKCR1bnRpbCk7XG4gICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgICAgJG1heC13aWR0aDogbXEtcHgyZW0obXEtZ2V0LWJyZWFrcG9pbnQtd2lkdGgoJHVudGlsLCAkYnJlYWtwb2ludHMpKSAtIC4wMWVtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVzcG9uc2l2ZSBzdXBwb3J0IGlzIGRpc2FibGVkLCByYXN0ZXJpemUgdGhlIG91dHB1dCBvdXRzaWRlIEBtZWRpYSBibG9ja3NcbiAgICAvLyBUaGUgYnJvd3NlciB3aWxsIHJlbHkgb24gdGhlIGNhc2NhZGUgaXRzZWxmLlxuICAgIEBpZiAkcmVzcG9uc2l2ZSA9PSBmYWxzZSB7XG4gICAgICAgICRzdGF0aWMtYnJlYWtwb2ludC13aWR0aDogbXEtZ2V0LWJyZWFrcG9pbnQtd2lkdGgoJHN0YXRpYy1icmVha3BvaW50LCAkYnJlYWtwb2ludHMpO1xuICAgICAgICAkdGFyZ2V0LXdpZHRoOiBtcS1weDJlbSgkc3RhdGljLWJyZWFrcG9pbnQtd2lkdGgpO1xuXG4gICAgICAgIC8vIE91dHB1dCBvbmx5IHJ1bGVzIHRoYXQgc3RhcnQgYXQgb3Igc3BhbiBvdXIgdGFyZ2V0IHdpZHRoXG4gICAgICAgIEBpZiAoXG4gICAgICAgICAgICAkYW5kID09IGZhbHNlXG4gICAgICAgICAgICBhbmQgJG1pbi13aWR0aCA8PSAkdGFyZ2V0LXdpZHRoXG4gICAgICAgICAgICBhbmQgKFxuICAgICAgICAgICAgICAgICR1bnRpbCA9PSBmYWxzZSBvciAkbWF4LXdpZHRoID49ICR0YXJnZXQtd2lkdGhcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBAY29udGVudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlc3BvbnNpdmUgc3VwcG9ydCBpcyBlbmFibGVkLCBvdXRwdXQgcnVsZXMgaW5zaWRlIEBtZWRpYSBxdWVyaWVzXG4gICAgQGVsc2Uge1xuICAgICAgICBAaWYgJG1pbi13aWR0aCAhPSAwIHsgJG1lZGlhLXF1ZXJ5OiAnI3skbWVkaWEtcXVlcnl9IGFuZCAobWluLXdpZHRoOiAjeyRtaW4td2lkdGh9KSc7IH1cbiAgICAgICAgQGlmICRtYXgtd2lkdGggIT0gMCB7ICRtZWRpYS1xdWVyeTogJyN7JG1lZGlhLXF1ZXJ5fSBhbmQgKG1heC13aWR0aDogI3skbWF4LXdpZHRofSknOyB9XG4gICAgICAgIEBpZiAkYW5kICAgICAgICAgICAgeyAkbWVkaWEtcXVlcnk6ICcjeyRtZWRpYS1xdWVyeX0gYW5kICN7JGFuZH0nOyB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIHVubmVjZXNzYXJ5IG1lZGlhIHF1ZXJ5IHByZWZpeCAnYWxsIGFuZCAnXG4gICAgICAgIEBpZiAoJG1lZGlhLXR5cGUgPT0gJ2FsbCcgYW5kICRtZWRpYS1xdWVyeSAhPSAnJykge1xuICAgICAgICAgICAgJG1lZGlhLXR5cGU6ICcnO1xuICAgICAgICAgICAgJG1lZGlhLXF1ZXJ5OiBzdHItc2xpY2UodW5xdW90ZSgkbWVkaWEtcXVlcnkpLCA2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIEBtZWRpYSAjeyRtZWRpYS10eXBlICsgJG1lZGlhLXF1ZXJ5fSB7XG4gICAgICAgICAgICBAY29udGVudDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8vIEFkZCBhIGJyZWFrcG9pbnRcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkbmFtZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnRcbi8vLyBAcGFyYW0ge051bWJlcn0gJHdpZHRoIC0gV2lkdGggb2YgdGhlIGJyZWFrcG9pbnRcbi8vL1xuLy8vIEByZXF1aXJlcyB7VmFyaWFibGV9ICRtcS1icmVha3BvaW50c1xuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICBAaW5jbHVkZSBtcS1hZGQtYnJlYWtwb2ludCh0dnNjcmVlbiwgMTkyMHB4KTtcbi8vLyAgQGluY2x1ZGUgbXEodHZzY3JlZW4pIHt9XG5AbWl4aW4gbXEtYWRkLWJyZWFrcG9pbnQoJG5hbWUsICR3aWR0aCkge1xuICAgICRuZXctYnJlYWtwb2ludDogKCRuYW1lOiAkd2lkdGgpO1xuICAgICRtcS1icmVha3BvaW50czogbWFwLW1lcmdlKCRtcS1icmVha3BvaW50cywgJG5ldy1icmVha3BvaW50KSAhZ2xvYmFsO1xufVxuXG4vLy8gU2hvdyB0aGUgYWN0aXZlIGJyZWFrcG9pbnQgaW4gdGhlIHRvcCByaWdodCBjb3JuZXIgb2YgdGhlIHZpZXdwb3J0XG4vLy8gQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3Nhc3MtbXEvc2Fzcy1tcSNzZWVpbmctdGhlLWN1cnJlbnRseS1hY3RpdmUtYnJlYWtwb2ludFxuLy8vXG4vLy8gQHBhcmFtIHtMaXN0fSAkc2hvdy1icmVha3BvaW50cyAoJG1xLXNob3ctYnJlYWtwb2ludHMpIC0gTGlzdCBvZiBicmVha3BvaW50cyB0byBzaG93IGluIHRoZSB0b3AgcmlnaHQgY29ybmVyXG4vLy8gQHBhcmFtIHtNYXB9ICRicmVha3BvaW50cyAoJG1xLWJyZWFrcG9pbnRzKSAtIEJyZWFrcG9pbnQgbmFtZXMgYW5kIHNpemVzXG4vLy9cbi8vLyBAcmVxdWlyZXMge1ZhcmlhYmxlfSAkbXEtYnJlYWtwb2ludHNcbi8vLyBAcmVxdWlyZXMge1ZhcmlhYmxlfSAkbXEtc2hvdy1icmVha3BvaW50c1xuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAvLyBTaG93IGJyZWFrcG9pbnRzIHVzaW5nIGdsb2JhbCBzZXR0aW5nc1xuLy8vICBAaW5jbHVkZSBtcS1zaG93LWJyZWFrcG9pbnRzO1xuLy8vXG4vLy8gIC8vIFNob3cgYnJlYWtwb2ludHMgdXNpbmcgY3VzdG9tIHNldHRpbmdzXG4vLy8gIEBpbmNsdWRlIG1xLXNob3ctYnJlYWtwb2ludHMoKEwsIFhMKSwgKFM6IDMwMHB4LCBMOiA4MDBweCwgWEw6IDEyMDBweCkpO1xuQG1peGluIG1xLXNob3ctYnJlYWtwb2ludHMoJHNob3ctYnJlYWtwb2ludHM6ICRtcS1zaG93LWJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludHM6ICRtcS1icmVha3BvaW50cykge1xuICAgIGJvZHk6YmVmb3JlIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0ZDRjhFMztcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNGQkVFRDU7XG4gICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI0ZCRUVENTtcbiAgICAgICAgY29sb3I6ICNDMDk4NTM7XG4gICAgICAgIGZvbnQ6IHNtYWxsLWNhcHRpb247XG4gICAgICAgIHBhZGRpbmc6IDNweCA2cHg7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIHotaW5kZXg6IDEwMDtcblxuICAgICAgICAvLyBMb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIHRoYXQgc2hvdWxkIGJlIHNob3duXG4gICAgICAgIEBlYWNoICRzaG93LWJyZWFrcG9pbnQgaW4gJHNob3ctYnJlYWtwb2ludHMge1xuICAgICAgICAgICAgJHdpZHRoOiBtcS1nZXQtYnJlYWtwb2ludC13aWR0aCgkc2hvdy1icmVha3BvaW50LCAkYnJlYWtwb2ludHMpO1xuICAgICAgICAgICAgQGluY2x1ZGUgbXEoJHNob3ctYnJlYWtwb2ludCwgJGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIiN7JHNob3ctYnJlYWtwb2ludH0g4omlICN7JHdpZHRofSAoI3ttcS1weDJlbSgkd2lkdGgpfSlcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuQGlmIGxlbmd0aCgkbXEtc2hvdy1icmVha3BvaW50cykgPiAwIHtcbiAgICBAaW5jbHVkZSBtcS1zaG93LWJyZWFrcG9pbnRzO1xufVxuIiwiLyoqXHJcbiogVXRpbGl0aWVzXHJcbipcclxuKiAtIEluY2x1ZGVkIGJ5IGRlZmF1bHQgZnJvbSBwcm9qZWN0IHRvIHByb2plY3RcclxuKiAtIFJldXNhYmxlIGNsYXNzZXMgZm9yIGNvbW1vbiBzb2x1dGlvbnNcclxuKiAtIE1peGluc1xyXG4qL1xyXG5cclxuLy8gRm9yIGxpbmtzLCBidXR0b25zLlxyXG4lc3VidGxlLWxpbmstdHJhbnNpdGlvbiB7XHJcblx0dHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjJzLFxyXG5cdFx0XHRcdGNvbG9yIDAuMnMsXHJcblx0Ym9yZGVyLWNvbG9yIDAuMnM7XHJcbn1cclxuXHJcbi8vIFJldHJpZXZlIHotaW5kZXggdmFsdWUgZnJvbSAkei1sYXllcnMgZGVmaW5lZCBpbiBfdmFyaWFibGVzLnNjc3MgLSBAYW5kcmV3XHJcbi8vIHVzYWdlOlxyXG4vLyAgIHotaW5kZXg6IGdldC16KFwibW9kYWxcIik7XHJcbkBmdW5jdGlvbiBnZXQteigkbGF5ZXIpIHtcclxuXHRAaWYgbWFwLWhhcy1rZXkoJHotbGF5ZXJzLCAkbGF5ZXIpIHtcclxuXHRcdEByZXR1cm4gbWFwLWdldCgkei1sYXllcnMsICRsYXllcik7XHJcblx0fSBAZWxzZSB7XHJcblx0XHRAZGVidWcgXCIjeyRsYXllcn0gZG9lcyBub3QgZXhpc3QgaW4gdGhlICR6LWxheWVycyBtYXAuIFByb3BlcnR5IG9taXR0ZWQuXCI7XHJcblx0fVxyXG59IiwiLyoqXHJcbiogQmFzZVxyXG4qXHJcbiogLSBLZWVwIHRoaXMgZmlsZSBtaW5pbWFsLiBTaG91bGQgYmUgZm9yIHRvcC1sZXZlbCBzdHVmZi5cclxuKlxyXG4qIEEuIEJldHRlciBib3ggc2l6aW5nIC0gYWxsb3dzIHNwZWNpZmljIGJveC1zaXppbmcgb3ZlcnJpZGVzIGlmIG5lZWRlZCBub3QgdG8gYnJlYWsgdGhlaXIgY2hpbGRyZW5cclxuKlxyXG4qL1xyXG5cclxuLy8gMS4gVGhpcyBzZXRzIDFyZW0gPSAxMHB4LiBodHRwOi8vc25vb2suY2EvYXJjaGl2ZXMvaHRtbF9hbmRfY3NzL2ZvbnQtc2l6ZS13aXRoLXJlbVxyXG5odG1sIHtcclxuXHRoZWlnaHQ6IDEwMCU7XHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDsgLy8gW0FdXHJcblx0dGV4dC1zaXplLWFkanVzdDogMTAwJTtcclxuXHRmb250LXNpemU6IDYyLjUlOyAvLyBbMV1cclxuXHJcblx0Ji5pcy1pZTgge1xyXG5cdFx0Zm9udC1zaXplOiAxMDAlO1xyXG5cdH1cclxufVxyXG5cclxuLy8gRG91YmxlIGNvbG9ucyBzaG91bGQgYmUgdXNlZCBmb3IgJ2JlZm9yZScgYW5kICdhZnRlcicgZWxlbWVudHMsIHVubGVzcyB5b3UgbmVlZCBJRTggc3VwcG9ydFxyXG4qLFxyXG4qOjpiZWZvcmUsXHJcbio6OmFmdGVyIHtcclxuXHRib3gtc2l6aW5nOiBpbmhlcml0OyAvLyBbQV1cclxufVxyXG5cclxuLy8gMS4gRm9yIHdoaXRlIHRleHQgb24gZGFyayBiZ1xyXG5ib2R5IHtcclxuXHQgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7IC8vIFsxXVxyXG5cdC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7ICAgLy8gWzFdXHJcblx0YmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcblx0Zm9udC1zaXplOiAxLjZyZW07XHJcbn1cclxuXHJcbmltZyxcclxuY2FudmFzLFxyXG5pZnJhbWUsXHJcbnZpZGVvLFxyXG5zdmcge1xyXG5cdG1heC13aWR0aDogMTAwJTtcclxufVxyXG5cclxuLy8gMS4gRml4IGEgfjNweCB2ZXJ0aWNhbCBzcGFjZSBiZWluZyBhZGRlZCBiZWxvdyBpbWFnZXMgKGFuIGludmlzaWJsZSBzcGFjZSlcclxuLy8gMi4gQWxsb3cgaW1hZ2VzIHRvIHNjYWxlLCBidXQgb25seSB1cCB0byB0aGVpciBuYXRpdmUgcmVzb2x1dGlvblxyXG5pbWcge1xyXG5cdHZlcnRpY2FsLWFsaWduOiB0b3A7IC8vIFsxXVxyXG5cdG1heC13aWR0aDogMTAwJTsgLy8gWzJdXHJcblx0d2lkdGg6IGF1dG87ICAgICAvLyBbMl1cclxuXHRoZWlnaHQ6IGF1dG87ICAgIC8vIFsyXVxyXG5cclxuXHQmLmltZy0tZnVsbCB7XHJcblx0XHR3aWR0aDogMTAwJTtcclxuXHR9XHJcbn0iLCIvKipcclxuKiBGb250IEZhbWlsaWVzXHJcbipcclxuKiAtIEFsbCBAZm9udC1mYWNlIGRlZmluaXRpb25zIHNob3VsZCBiZSBpbiBoZXJlXHJcbiogLSBUYWtlbiBmcm9tOiBodHRwOi8vd3d3LnBhdWxpcmlzaC5jb20vMjAwOS9idWxsZXRwcm9vZi1mb250LWZhY2UtaW1wbGVtZW50YXRpb24tc3ludGF4L1xyXG4qXHJcbiogU3VwcG9ydHM6XHJcbipcdENocm9tZSAzLjUrXHJcbipcdFNhZmFyaSAzK1xyXG4qXHRGaXJlZm94IDMuNStcclxuKlx0SUUgOStcclxuKlx0QW5kcm9pZCA0LjQrXHJcbipcdGlPUyA1LjErXHJcbipcclxuKi9cclxuXHJcbiRmb250cy1kaXJlY3RvcnktcGF0aDogJy4uL2ZvbnRzLycgIWRlZmF1bHQ7XHJcblxyXG5cclxuLy8vLyBGb250IEZhbWlseSBOYW1lIC8vLy9cclxuLy9AZm9udC1mYWNlIHtcclxuLy9cdGZvbnQtZmFtaWx5OiAnRm9udEZhbWlseU5hbWUnO1xyXG4vL1x0c3JjOiB1cmwoJGZvbnRzLWRpcmVjdG9yeS1wYXRoICsgJ2ZpbGVuYW1lLmVvdD8nKSBmb3JtYXQoJ2VvdCcpLFxyXG4vL1x0XHQgdXJsKCRmb250cy1kaXJlY3RvcnktcGF0aCArICdmaWxlbmFtZS53b2ZmMicpIGZvcm1hdCgnd29mZjInKSxcclxuLy9cdFx0IHVybCgkZm9udHMtZGlyZWN0b3J5LXBhdGggKyAnZmlsZW5hbWUud29mZicpIGZvcm1hdCgnd29mZicpLFxyXG4vL1x0XHQgdXJsKCRmb250cy1kaXJlY3RvcnktcGF0aCArICdmaWxlbmFtZS50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XHJcbi8vfVxyXG5cclxuXHJcbi8vLy8gRm9udCBGYW1pbHkgTmFtZSAvLy8vXHJcbi8vQGZvbnQtZmFjZSB7XHJcbi8vXHRmb250LWZhbWlseTogJ0ZvbnRGYW1pbHlOYW1lJztcclxuLy9cdHNyYzogdXJsKCRmb250cy1kaXJlY3RvcnktcGF0aCArICdmaWxlbmFtZS5lb3Q/JykgZm9ybWF0KCdlb3QnKSxcclxuLy9cdFx0IHVybCgkZm9udHMtZGlyZWN0b3J5LXBhdGggKyAnZmlsZW5hbWUud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksXHJcbi8vXHRcdCB1cmwoJGZvbnRzLWRpcmVjdG9yeS1wYXRoICsgJ2ZpbGVuYW1lLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcclxuLy9cdFx0IHVybCgkZm9udHMtZGlyZWN0b3J5LXBhdGggKyAnZmlsZW5hbWUudHRmJykgZm9ybWF0KCd0cnVldHlwZScpO1xyXG4vL30iLCIvLy8vIFNUQVRJQyBDTEFTU0VTXHJcbi8vLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4uY29udGFpbmVyIHtcclxuXHR3aWR0aDogMTAwJTtcclxuXHRtYXgtd2lkdGg6ICRtYXgtc2l0ZS13aWR0aDtcclxuXHRtYXJnaW46IDAgYXV0bztcclxuXHRcclxuXHRAaW5jbHVkZSBtcSgkZnJvbTogeHh4cykge1xyXG5cdFx0cGFkZGluZzogMCBtYXAtZ2V0KCRjb250YWluZXItZ3V0dGVyLCAneHh4cycpO1xyXG5cdH1cclxuXHRcdFxyXG5cdEBpbmNsdWRlIG1xKCRmcm9tOiB4cykge1xyXG5cdFx0cGFkZGluZzogMCBtYXAtZ2V0KCRjb250YWluZXItZ3V0dGVyLCAneHMnKTtcclxuXHR9XHJcblx0XHRcclxuXHRAaW5jbHVkZSBtcSgkZnJvbTogbSkge1xyXG5cdFx0cGFkZGluZzogMCBtYXAtZ2V0KCRjb250YWluZXItZ3V0dGVyLCAnbScpO1xyXG5cdH1cclxuXHRcdFxyXG5cdEBpbmNsdWRlIG1xKCRmcm9tOiB4bCkge1xyXG5cdFx0cGFkZGluZzogMCBtYXAtZ2V0KCRjb250YWluZXItZ3V0dGVyLCAneGwnKTtcclxuXHR9XHJcblx0XHRcclxuXHRAaW5jbHVkZSBtcSgkZnJvbTogeHh4bCkge1xyXG5cdFx0cGFkZGluZzogMCBtYXAtZ2V0KCRjb250YWluZXItZ3V0dGVyLCAneHh4bCcpO1xyXG5cdH1cclxufSIsIi8qKlxyXG4gKlxyXG4gKiBIZWFkZXIgLSBDb21wb25lbnQgc3R5bGVzXHJcbiAqXHJcbiAqL1xyXG5cclxuIC5oZWFkZXIge1xyXG4gICAgIFxyXG4gfSIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIEljb25zXHJcbi8vIC0gV2UncmUgdXNpbmcgLnN2ZyBpY29uc1xyXG4vL1xyXG4vLyBAcmVzb3VyY2VzXHJcbi8vIGh0dHA6Ly9jc3MtdHJpY2tzLmNvbS9zdmctc3ByaXRlcy11c2UtYmV0dGVyLWljb24tZm9udHMvXHJcbi8vIGh0dHA6Ly9jc3MtdHJpY2tzLmNvbS9zdmctc3ltYm9sLWdvb2QtY2hvaWNlLWljb25zL1xyXG4vL1xyXG4vLyBAdXNhZ2VcclxuLy8gPHN2ZyBjbGFzcz1cImljb24gaWNvbi14eHh4XCI+PHVzZSB4bGluazpocmVmPVwiI2ljb24teHh4eFwiPjwvdXNlPjwvc3ZnPlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLmljb25zLXN2ZyB7XHJcblx0ZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuLy8gMS4gUm91Z2hseSAxLzUgb2Ygd2lkdGggYW5kIGhlaWdodCBzZWVtcyB0byBiZSBjb3JyZWN0IGZvciBtb3N0IGljb25zLCBidXQgdGhlcmUgYXJlIGlzc3VlcyB3aXRoIHRoaXMuIFRyeWluZyB0b3BcclxuLy8gICAgdXNpbmcgeC1oZWlnaHQgaW5zdGVhZC5cclxuLy8gMi4gTm90IHN1cmUgd2hpY2ggdW5pdHMgYXJlIHRoZSBiZXN0IGhlcmUsIG1heWJlIGV4IGlzIGJldHRlciBhcyBpdCB3b3VsZCB0aGVuIHJlbGF0ZSB0byB3aGF0ZXZlciB0aGUgZm9udCBzaXplIGlzP1xyXG4vLyAzLiBEdWUgdG8gdGhlIHdheSB0aGUgZGlzY2xvc3VyZSBjb2RlIGlzIGhpZ2hseSBzZW5zaXRpdmUgdG8gdGhlIGNsYXNzIG5hbWUgb2YgdGhlIGljb24gKHRvIGNoYW5nZSBmcm9tIHBsdXMgdG8gbWludXNcclxuLy8gICAgZm9yIGV4YW1wbGUpLCBpdCBpcyBzYWZlciB0byBtb2RpZnkgdGhpcyBmcm9tIGEgcGFyZW50IHJhdGhlciB0aGFuIGRpcmVjdGx5IGFmZmVjdGluZyB0aGUgaWNvbi4gTm90IGdyZWF0LCBJIGtub3csXHJcbi8vICAgIGJ1dCB5b3UgY2FuIHNlZSB0aGUgYXBwLmRpc2Nsb3N1cmUuanMgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgY2hhbmdpbmcgdGhlIFNWRyBpZiB5b3Ugd2FudCB0byBrbm93IG1vcmUgOilcclxuLy8gNC4gVGhpcyBvbmUgaXMgdHJpY2t5LiBUaGVyZSBzZWVtcyB0byBiZSBzb21lIHNldmVyZSBpc3N1ZSBiZXR3ZWVuIHN2ZyB4bGluayBhbmQgalF1ZXJ5IC5vbigpIHdoaWNoIGNhdXNlcyB0aGUgU1ZHIHRvXHJcbi8vICAgIGZhaWwgdG8gdHJpZ2dlciBhbiBldmVudCBpbiBNU0lFIGFuZCBTYWZhcmkuIEJ5IGNhdXNpbmcgU1ZHcyB0byBuZXZlciBlbWl0IGV2ZW50cywgd2UgY2FuIGtpbmQgb2YgbWl0aWdhdGUgdGhhdC5cclxuLy8gICAgSXQncyByZWFsbHkgaGFja2lzaCwgYW5kIHdpbGwgb25seSBzYWx2YWdlIElFMTErIGFuZCByZWNlbnQgU2FmYXJpIHZlcnNpb25zLCBidXQgaXQncyBiZXR0ZXIgdGhhbiBub3RoaW5nIEkgZ3Vlc3M/XHJcbi5pY29uIHtcclxuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdHdpZHRoOiAgMWVtO1xyXG5cdGhlaWdodDogMWVtO1xyXG5cdHRvcDogMC4yNWV4OyAvLyBbMV1cclxuXHRmaWxsOiBjdXJyZW50Q29sb3I7XHJcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7IC8vIFs0XVxyXG59IiwiZm9ybS5wbGFpbiB7XHJcbiAgZGlzcGxheTogaW5saW5lO1xyXG5cclxuICBidXR0b24ge1xyXG4gICAgYmFja2dyb3VuZDogbm9uZTtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBmb250OiBpbmhlcml0O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxufVxyXG5cclxuZm9ybS5pbmxpbmUge1xyXG4gIGRpc3BsYXk6IGlubGluZTtcclxufVxyXG5cclxuLmZvcm1fX2Vycm9yIHtcclxuICBjb2xvcjogcmVkO1xyXG59XHJcblxyXG4uaWNvbi1idG4ge1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICBjb2xvcjogIzMzN2FiNztcclxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcblxyXG4gICY6aG92ZXIsXHJcbiAgJjpmb2N1cyB7XHJcbiAgICBjb2xvcjogIzIzNTI3YztcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gICY6Zm9jdXMge1xyXG4gICAgb3V0bGluZTogNXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yO1xyXG4gICAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7XHJcbiAgfVxyXG5cclxuICAuaWNvbiB7XHJcbiAgICB3aWR0aDogMS4xZW07XHJcbiAgICBoZWlnaHQ6IDEuMWVtO1xyXG4gIH1cclxuXHJcbiAgJisuaWNvbi1idG4sXHJcbiAgJitmb3JtLnBsYWluIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAwLjVyZW07XHJcbiAgfVxyXG59IiwiXHJcbi5hc3NldC1hZGQsXHJcbi5hc3NldC1jbGVhciB7XHJcbiAgY29sb3I6ICRjb2xvcl9fbWFyaW5lcjtcclxuXHJcbiAgJjpob3ZlciB7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICBjb2xvcjogZGFya2VuKCRjb2xvcl9fbWFyaW5lciwgNSk7XHJcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggZGFya2VuKCRjb2xvcl9fbWFyaW5lciwgNSk7XHJcbiAgfVxyXG59XHJcblxyXG4uYXNzZXQtaW1nIHtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBtYXgtd2lkdGg6IDIwcmVtO1xyXG4gIG1heC1oZWlnaHQ6IDIwcmVtO1xyXG5cclxuICAmOmhvdmVyIHtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICB9XHJcbn0iLCIvKipcclxuICpcclxuICogSG9tZSBwYWdlIHNwZWNpZmljIHN0eWxlc1xyXG4gKlxyXG4gKi9cclxuXHJcbiAucGFnZS1ob21lcGFnZSB7XHJcbiAgICAgLmhlYWRlciB7XHJcblxyXG4gICAgIH1cclxuIH0iXX0= */
