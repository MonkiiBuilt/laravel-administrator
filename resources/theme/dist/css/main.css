@charset "UTF-8";
/**
 * Monkii Bars for sites by Monkii
 *
 */
/**
 *
 * Colours
 *
 * For naming, read: http://davidwalsh.name/sass-color-variables-dont-suck
 * Naming generator: http://chir.ag/projects/name-that-color/
 *
 * Don't make up or use generic names. i.e. color__red, color_my-cool-colour
 * Though you might want to associate a few simple colours for reference
 *
 * Black and white can be as HTML colours, color: black; color: white;
 */
/**
 *
 * General, site-wide variables
 *
 *
 * Variables
 * - Name concisely, with full name unless abbreviation is obvious
 * 		e.g. ok to use -bg- for -background-
 * - Variables in this file should follow this format:
 * 		- $mb-component-name__[component-type]-css-property OR other
 *      - This goes in order from generic -> specific
 * - Variables inside a component file should be pre-fixed with $_mb-
 *		e.g. $_mb-button__padding
 */
body:before {
  background-color: #FCF8E3;
  border-bottom: 1px solid #FBEED5;
  border-left: 1px solid #FBEED5;
  color: #C09853;
  font: small-caption;
  padding: 3px 6px;
  pointer-events: none;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 100; }
  @media (min-width: 20em) {
    body:before {
      content: "xxxs ≥ 20em (20em)"; } }
  @media (min-width: 30em) {
    body:before {
      content: "xxs ≥ 30em (30em)"; } }
  @media (min-width: 35em) {
    body:before {
      content: "xs ≥ 35em (35em)"; } }
  @media (min-width: 40em) {
    body:before {
      content: "s ≥ 40em (40em)"; } }
  @media (min-width: 50em) {
    body:before {
      content: "m ≥ 50em (50em)"; } }
  @media (min-width: 60em) {
    body:before {
      content: "l ≥ 60em (60em)"; } }
  @media (min-width: 64em) {
    body:before {
      content: "xl ≥ 64em (64em)"; } }
  @media (min-width: 80em) {
    body:before {
      content: "xxl ≥ 80em (80em)"; } }
  @media (min-width: 100em) {
    body:before {
      content: "xxxl ≥ 100em (100em)"; } }

/**
* Utilities
*
* - Included by default from project to project
* - Reusable classes for common solutions
* - Mixins
*/
/**
* Base
*
* - Keep this file minimal. Should be for top-level stuff.
*
* A. Better box sizing - allows specific box-sizing overrides if needed not to break their children
*
*/
html {
  height: 100%;
  box-sizing: border-box;
  -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
          text-size-adjust: 100%;
  font-size: 62.5%; }
  html.is-ie8 {
    font-size: 100%; }

*,
*::before,
*::after {
  box-sizing: inherit; }

body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: white;
  font-size: 1.6rem; }

img,
canvas,
iframe,
video,
svg {
  max-width: 100%; }

img {
  vertical-align: top;
  max-width: 100%;
  width: auto;
  height: auto; }
  img.img--full {
    width: 100%; }

/**
* Font Families
*
* - All @font-face definitions should be in here
* - Taken from: http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/
*
* Supports:
*	Chrome 3.5+
*	Safari 3+
*	Firefox 3.5+
*	IE 9+
*	Android 4.4+
*	iOS 5.1+
*
*/
.container {
  width: 100%;
  max-width: 120rem;
  margin: 0 auto; }
  @media (min-width: 20em) {
    .container {
      padding: 0 1rem; } }
  @media (min-width: 35em) {
    .container {
      padding: 0 1.5rem; } }
  @media (min-width: 50em) {
    .container {
      padding: 0 2rem; } }
  @media (min-width: 64em) {
    .container {
      padding: 0 2.5rem; } }
  @media (min-width: 100em) {
    .container {
      padding: 0 3rem; } }

/**
 *
 * Header - Component styles
 *
 */
.icons-svg {
  display: none; }

.icon {
  display: inline-block;
  position: relative;
  width: 1em;
  height: 1em;
  top: 0.25ex;
  fill: currentColor;
  pointer-events: none; }

form.plain {
  display: inline; }
  form.plain button {
    background: none;
    border: none;
    padding: 0;
    font: inherit;
    cursor: pointer; }

form.inline {
  display: inline; }

.icon-btn {
  display: inline-block;
  color: #337ab7;
  text-decoration: none; }
  .icon-btn:hover, .icon-btn:focus {
    color: #23527c;
    text-decoration: none; }
  .icon-btn:focus {
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px; }
  .icon-btn .icon {
    width: 1.1em;
    height: 1.1em; }
  .icon-btn + .icon-btn,
  .icon-btn + form.plain {
    margin-left: 0.5rem; }

/**
 *
 * Home page specific styles
 *
 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
