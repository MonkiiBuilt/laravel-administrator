@charset "UTF-8";
/**
 * Monkii Bars for sites by Monkii
 *
 */
/**
 *
 * Colours
 *
 * For naming, read: http://davidwalsh.name/sass-color-variables-dont-suck
 * Naming generator: http://chir.ag/projects/name-that-color/
 *
 * Don't make up or use generic names. i.e. color__red, color_my-cool-colour
 * Though you might want to associate a few simple colours for reference
 *
 * Black and white can be as HTML colours, color: black; color: white;
 */
/**
 *
 * General, site-wide variables
 *
 *
 * Variables
 * - Name concisely, with full name unless abbreviation is obvious
 * 		e.g. ok to use -bg- for -background-
 * - Variables in this file should follow this format:
 * 		- $mb-component-name__[component-type]-css-property OR other
 *      - This goes in order from generic -> specific
 * - Variables inside a component file should be pre-fixed with $_mb-
 *		e.g. $_mb-button__padding
 */
body:before {
  background-color: #FCF8E3;
  border-bottom: 1px solid #FBEED5;
  border-left: 1px solid #FBEED5;
  color: #C09853;
  font: small-caption;
  padding: 3px 6px;
  pointer-events: none;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 100; }
  @media (min-width: 20em) {
    body:before {
      content: "xxxs ≥ 20em (20em)"; } }
  @media (min-width: 30em) {
    body:before {
      content: "xxs ≥ 30em (30em)"; } }
  @media (min-width: 35em) {
    body:before {
      content: "xs ≥ 35em (35em)"; } }
  @media (min-width: 40em) {
    body:before {
      content: "s ≥ 40em (40em)"; } }
  @media (min-width: 50em) {
    body:before {
      content: "m ≥ 50em (50em)"; } }
  @media (min-width: 60em) {
    body:before {
      content: "l ≥ 60em (60em)"; } }
  @media (min-width: 64em) {
    body:before {
      content: "xl ≥ 64em (64em)"; } }
  @media (min-width: 80em) {
    body:before {
      content: "xxl ≥ 80em (80em)"; } }
  @media (min-width: 100em) {
    body:before {
      content: "xxxl ≥ 100em (100em)"; } }

/**
* Utilities
*
* - Included by default from project to project
* - Reusable classes for common solutions
* - Mixins
*/
/**
* Base
*
* - Keep this file minimal. Should be for top-level stuff.
*
* A. Better box sizing - allows specific box-sizing overrides if needed not to break their children
*
*/
html {
  height: 100%;
  box-sizing: border-box;
  -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
          text-size-adjust: 100%;
  font-size: 62.5%; }
  html.is-ie8 {
    font-size: 100%; }

*,
*::before,
*::after {
  box-sizing: inherit; }

body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: white; }

img,
canvas,
iframe,
video,
svg {
  max-width: 100%; }

img {
  vertical-align: top;
  max-width: 100%;
  width: auto;
  height: auto; }
  img.img--full {
    width: 100%; }

/**
* Font Families
*
* - All @font-face definitions should be in here
* - Taken from: http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/
*
* Supports:
*	Chrome 3.5+
*	Safari 3+
*	Firefox 3.5+
*	IE 9+
*	Android 4.4+
*	iOS 5.1+
*
*/
@font-face {
  font-family: 'Avenir Bold';
  src: url("../../fonts/AvenirNextLTPro-Bold.eot");
  src: url("../../fonts/AvenirNextLTPro-Bold.eot?#iefix") format("embedded-opentype"), url("../../fonts/AvenirNextLTPro-Bold.woff") format("woff"), url("../../fonts/AvenirNextLTPro-Bold.ttf") format("truetype"), url("../../fonts/AvenirNextLTPro-Bold.svg#webfont") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'Avenir Medium';
  src: url("../../fonts/AvenirNextLTPro-Medium.eot");
  src: url("../../fonts/AvenirNextLTPro-Medium.eot?#iefix") format("embedded-opentype"), url("../../fonts/AvenirNextLTPro-Medium.woff") format("woff"), url("../../fonts/AvenirNextLTPro-Medium.ttf") format("truetype"), url("../../fonts/AvenirNextLTPro-Medium.svg#webfont") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'Avenir Italic';
  src: url("../../fonts/AvenirNextLTPro-MediumIt.eot");
  src: url("../../fonts/AvenirNextLTPro-MediumIt.eot?#iefix") format("embedded-opentype"), url("../../fonts/AvenirNextLTPro-MediumIt.woff") format("woff"), url("../../fonts/AvenirNextLTPro-MediumIt.ttf") format("truetype"), url("../../fonts/AvenirNextLTPro-MediumIt.svg#webfont") format("svg");
  font-weight: normal;
  font-style: normal; }

.container {
  width: 100%;
  max-width: 114rem;
  margin: 0 auto; }
  @media (min-width: 20em) {
    .container {
      padding: 0 1rem; } }
  @media (min-width: 35em) {
    .container {
      padding: 0 1.5rem; } }
  @media (min-width: 50em) {
    .container {
      padding: 0 2rem; } }
  @media (min-width: 64em) {
    .container {
      padding: 0 2.5rem; } }
  @media (min-width: 100em) {
    .container {
      padding: 0 3rem; } }

body.pdf {
  background-color: #fff; }

.wrapper {
  width: 100%;
  margin: 0 auto;
  padding: 2rem 2rem; }

.pdf h1, .pdf h2, .pdf h3, .pdf h4 {
  color: black; }

.pdf h1 {
  font-size: 2rem; }

.pdf h3 {
  margin-bottom: 2.2rem; }

.pdf h4 {
  margin-bottom: 1rem; }

.pdf .header {
  background-color: white; }
  .pdf .header .home {
    float: left; }
  .pdf .header .logo {
    display: block;
    width: 18rem;
    margin-top: 1rem; }

.pdf .contact-details {
  float: left;
  font-size: 1.4rem;
  margin-left: 4rem; }
  .pdf .contact-details .contact-address {
    font-weight: bold; }

.pdf table {
  color: #000;
  border: 1px solid #888;
  margin-bottom: 2rem; }
  .pdf table th {
    color: #fff;
    background: #888; }
    .pdf table th.blank-cell {
      background: #fff; }
  .pdf table td, .pdf table th {
    padding: 1rem 2rem; }

.pdf footer {
  margin-top: 2rem;
  text-align: center;
  font-weight: bold; }

.invoice-tables {
  clear: both; }
  .invoice-tables #invoice-number {
    text-align: right;
    margin-bottom: 2rem;
    color: #000;
    font-weight: bold; }
  .invoice-tables table {
    width: 100%; }
  .invoice-tables td {
    border: 1px solid #888; }
  .invoice-tables #invoice-to, .invoice-tables #invoice-date {
    width: auto; }
  .invoice-tables #invoice-to {
    float: left; }
  .invoice-tables #invoice-date {
    float: right; }
  .invoice-tables .invoice-product {
    border-right: none; }
  .invoice-tables .invoice-line-item {
    text-align: right;
    border-top: none;
    border-bottom: none; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
